# -*- coding: utf-8 -*-
"""Stock MA Signal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YpsFB3glMFugxlSzDdVvG2jKMWpX8ljT
"""

# Install yahoo finance library
!pip install yfinance

# Install candle stick library
!pip install mpl_finance

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import pandas_datareader as web
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import matplotlib.dates as mpl_dates
from datetime import datetime
from mpl_finance import candlestick_ohlc
from matplotlib.dates import DateFormatter, date2num, WeekdayLocator, DayLocator, MONDAY
# %matplotlib inline

# Start date
# startDate = datetime(2015,1,1).strftime('%Y-%m-%d')
startDate = datetime(2020,1,1).strftime('%Y-%m-%d')

# Get latest day
today = datetime.today().strftime('%Y-%m-%d')

# Get the stock
stock = yf.download("BBNI.JK", start=startDate, end=today)

# Show the data
stock

# Create functions to calculate Moving Average
def MA(data, period, column='Close'):
  return data[column].rolling(window=period).mean()

# Create function to calculate OBV
# OBV is a technical analysis indicator by combina price and volume at market.
OBV = []
OBV.append(0)

for i in range(1, len(stock['Close'])):
  if stock['Close'][i] > stock['Close'][i-1]:
    OBV.append(OBV[-1] + stock['Volume'][i])
  elif stock['Close'][i] < stock['Close'][i-1]:
    OBV.append(OBV[-1] - stock['Volume'][i])
  else:
    OBV.append(OBV[-1])

# Get MA
stock['MA5'] = MA(stock, 5)
stock['MA20'] = MA(stock, 20)
stock['MA50'] = MA(stock, 50)

# Get Stock OBV
stock['OBV'] = OBV
stock['OBV_MA20'] = stock['OBV'].rolling(20).mean()

# Show latest data
stock.tail()

# Create signal buy and sell based on OBV
def buy_sell(signal, col1, col2):
  signalBuy = []
  signalSell = []
  flag = -1

  # Loop through the length of the data set
  for i in range(0, len(signal)):
    # If OBV > OBV_MA20 then Buy --> col1 '(OBV)' and col2 '(OBV_MA20)'
    if signal[col1][i] > signal[col2][i] and flag != 1:
      signalBuy.append(signal['Close'][i])
      signalSell.append(np.nan)
      flag = 1
    # If OBV < OBV_MA20 then Sell 
    elif signal[col1][i] < signal[col2][i] and flag != 0:
      signalSell.append(signal['Close'][i])
      signalBuy.append(np.nan)
      flag = 0
    else:
      signalSell.append(np.nan)
      signalBuy.append(np.nan)

  return (signalBuy, signalSell)

# Create buy and sell columns in MA20
x = buy_sell(stock, 'OBV', 'OBV_MA20')
stock['Buy Signal'] = x[0]
stock['Sell Signal'] = x[1]

stock.tail()

# Extracting Data for plotting
ohlc = stock.loc['2020-01' : '2020-12'].reset_index()
ohlc['date_ax'] = ohlc['Date'].apply(mpl_dates.date2num)

# Add Moving Average
ohlc['MA5'] = MA(ohlc, 5)
ohlc['MA20'] = MA(ohlc, 20)
ohlc['MA50'] = MA(ohlc, 50)

stock_values = [tuple(vals) for vals in ohlc[['date_ax', 'Open', 'High', 'Low', 'Close']].values]

# Setting and Formmating Date for Candle
mondays = WeekdayLocator(MONDAY)
alldays = DayLocator()
weekFormatter = DateFormatter('%d %b')
dayFormatter = DateFormatter('%d')

# Visualize candle
plt.style.use('ggplot')
fig, ax = plt.subplots(figsize=(20,9))
candlestick_ohlc(ax, stock_values, width=0.8, colorup='g', colordown='r', alpha=0.8)

# Show MA legend
ma_list = ['MA5', 'MA20', 'MA50']
ax.plot(ohlc['Date'], ohlc[ma_list])

# Date formatting
date_format = mpl_dates.DateFormatter('%d-%m-%y')

# Set label x,y and title
plt.title('BBNI Moving Average', fontsize=20)
ax.set_xlabel('Date', fontsize=18)
ax.set_ylabel('Price IDR', fontsize=18)
ax.xaxis.set_major_formatter(date_format)

fig.autofmt_xdate()

plt.legend(ma_list, loc=1)
plt.show()

# Visualize the buy and sell prices
plt.figure(figsize=(12.2, 4.5))
plt.plot(stock['Close'], label='Close', alpha=0.35)
plt.scatter(stock.index, stock['Buy Signal'], label='Buy Signal', marker='^', alpha=1, color='green')
plt.scatter(stock.index, stock['Sell Signal'], label='Sell Signal', marker='v', alpha=1, color='red')
plt.title('BBNI.JK Buy and Sell Signal', fontsize=18)
plt.xlabel('Date', fontsize=18)
plt.ylabel('Price IDR', fontsize=18)
plt.legend(loc='upper left')
plt.show()